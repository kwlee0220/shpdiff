apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'nebula-aggregate-javadocs'	// gradle aggregateJavadocs
 
group = 'etri'
version = '20.05.08'

sourceCompatibility = JavaVersion.VERSION_1_8;
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'


buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
		classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
	}
}

repositories {
    mavenLocal()
	maven {
		url "http://www.datanucleus.org/downloads/maven2/"
	}
	maven {
		url "http://repo.osgeo.org/repository/release/"
	}
    mavenCentral()
	maven {
		url "http://repo.boundlessgeo.com/main/"
	}
}

dependencies {
	compile project(":marmot.data")
	compile project(":marmot.shp")
	compile project(':utils.geo')
}

shadowJar {
	classifier 'all'
	
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	source sourceSets.main.allJava
	
	title = 'ShpDiff Document'
	
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
	options.links = ['https://docs.oracle.com/javase/8/docs/api/']
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

publishing {
	publications {
		marmotClient(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
			artifact shadowJar
		}
	}
}

apply plugin: 'maven-publish'
publishing {
	publications {
		main(MavenPublication) {
			artifact jar
			artifact sourceJar
			artifact javadocJar
		}
	}
}

task distributeBinary(type:Copy) {
	if ( !project.hasProperty('distDir') ) {
		ext.distDir = "${System.getProperty('user.dir')}/shpdiff.dist"
	}
	
	dependsOn assemble
	into "${distDir}"
	from ("${projectDir}") {
		include 'bin/**'
		include 'log4j.properties'
		include '.gitignore'
	}
	from "${buildDir}/libs/${archivesBaseName}-${version}-javadoc.jar"
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						entry.output = 'classes'
					}
				}
			}
		}
	}
}
